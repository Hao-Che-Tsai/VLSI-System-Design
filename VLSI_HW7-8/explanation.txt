----------------Part 2----------------

Reason of low coverage for the cross-point in the first cover group is that the following cross-point is not in our expected.
bin <subt,done>                                              
bin <swap,done>                                          
bin <done,subt>                                                
bin <subt,subt>                                              
bin <done,swap>                                               
bin <subt,swap>                                               
bin <swap,swap>                                                
bin <swap,test>                                            
bin <test,test>                                       

For second cover group, the input doesn't include the integer 5000. 

For forth cover group, since the case which swap and subtract won't happen in the same time, thus it will leads to an uncovered situation.
The above reasons are why the we have low coverage report.

----------------Part 3----------------

The modification for first cover group are that I  list these bins to be illegal bins:
bin <done,subt>                                                
bin <subt,subt>                                              
bin <done,swap>                                               
bin <subt,swap>                                               
bin <swap,swap>                                                
bin <swap,test>                                            
bin <test,test>
Since these transitions are all not supposed to happen. If they happens, it must be an illegal situation.
For bin <subt,done>, bin <swap,done>, I set them as ignore bins. 
Since in the specific situation, such as if reset_n deassert, these transition are valid.


For second cover group, I include a set of integer which is 5000 to satisfy the cover group.

For forth cover group, I include the case which swap and subtract happen in the same time is illegal.
After these changes, the coverage report is now 100%.

----------------Part 5----------------

The method that I generate pairs of numbers (a_in, b_in) such that they are relatively prime is that I  generate a_in as a random number, then generate b_in as a random prime number. A prime number has no divisors other than 1 and itself, so the GCD of a prime number and any other number (that isn't a multiple of the prime number) will always be 1.


Runtime for cvr_sequence = 
real    0m50.011s
user    0m48.689s
sys     0m0.559s

Runtime for cvr_silly = 
real    0m57.441s
user    0m55.554s
sys     0m0.905s



